package org.redcross.sar.mso.data;

import org.redcross.sar.mso.IMsoManagerIf;
import org.redcross.sar.mso.IMsoModelIf;
import org.redcross.sar.util.except.MsoCastException;
import org.redcross.sar.util.except.DuplicateIdException;

import java.util.Calendar;
import java.util.Collection;

public class EventImpl extends AbstractTimeItem implements IEventIf, ISerialNumberedIf
{

    private final AttributeImpl.MsoInteger m_number = new AttributeImpl.MsoInteger(this, "Number");

    /**
     * List of tasks generated by this event
     */
    private final TaskListImpl m_eventTasks = new TaskListImpl(this, "EventTasks", false);

    public EventImpl(IMsoObjectIf.IObjectIdIf anObjectId, int aNumber, Calendar aCalendar)
    {
        super(anObjectId, aCalendar);
        setNumber(aNumber);
    }

    protected void defineAttributes()
    {
        super.defineAttributes();
        addAttribute(m_number);
    }

    protected void defineLists()
    {
        super.defineLists();
        addList(m_eventTasks);
    }

    protected void defineReferences()
    {
        super.defineReferences();
    }

    public static EventImpl implementationOf(IEventIf anInterface) throws MsoCastException
    {
        try
        {
            return (EventImpl) anInterface;
        }
        catch (ClassCastException e)
        {
            throw new MsoCastException("Illegal cast to EventImpl");
        }
    }

    public IMsoManagerIf.MsoClassCode getMsoClassCode()
    {
        return IMsoManagerIf.MsoClassCode.CLASSCODE_EVENT;
    }

    /*-------------------------------------------------------------------------------------------
    * Methods for attributes
    *-------------------------------------------------------------------------------------------*/
    // From ISerialNumberedIf
    public void setNumber(int aNumber)
    {
        m_number.setValue(aNumber);
    }

    public int getNumber()
    {
        return m_number.intValue();
    }

    public IMsoModelIf.ModificationState getNumberState()
    {
        return m_number.getState();
    }

    public IAttributeIf.IMsoIntegerIf getNumberAttribute()
    {
        return m_number;
    }

    /*-------------------------------------------------------------------------------------------
    * Methods for lists
    *-------------------------------------------------------------------------------------------*/

    public void addEventTasks(ITaskIf anITaskIf) throws DuplicateIdException
    {
        m_eventTasks.add(anITaskIf);
    }

    public ITaskListIf getEventTasks()
    {
        return m_eventTasks;
    }

    public IMsoModelIf.ModificationState getEventTasksState(ITaskIf anITaskIf)
    {
        return m_eventTasks.getState(anITaskIf);
    }

    public Collection<ITaskIf> getEventTasksItems()
    {
        return m_eventTasks.getItems();
    }

    /*-------------------------------------------------------------------------------------------
    * Other specified methods
    *-------------------------------------------------------------------------------------------*/

    public Calendar getEventTime()
    {
        return null; /*todo*/
    }

    public void setEventTime()
    { /*todo*/
    }


}